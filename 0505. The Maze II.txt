class Solution {
    public int shortestDistance(int[][] maze, int[] start, int[] dest) {
        int row = maze.length;
        int col = maze[0].length;
        int[][] distance = new int[row][col];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                distance[i][j] = Integer.MAX_VALUE;
            }
        }
        int[] dx = new int[] {1, 0, 0, -1};
        int[] dy = new int[] {0, -1, 1, 0};
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(start);
        distance[start[0]][start[1]] = 0;
        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            for (int i = 0; i < 4; i ++) {
                int x = current[0];
                int y = current[1];
                int dist = distance[x][y];
                while (x >= 0 && x < row && y >= 0 & y < col && maze[x][y] == 0) {
                    x += dx[i];
                    y += dy[i];
                    dist ++;
                }
                x -= dx[i];
                y -= dy[i];
                --dist;
                if (distance[x][y] > dist) {
                    distance[x][y] = dist;
                    if (x != dest[0] || y != dest[1]) {
                        queue.offer(new int[]{x, y});
                    }
                }
            }
        }
        int res = distance[dest[0]][dest[1]];
        return res == Integer.MAX_VALUE ? -1 : res;
    }
}