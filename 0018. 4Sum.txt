class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        HashSet<List<Integer>> resSet = new HashSet<>();
        if(nums.length < 4) return res;
        List<Integer> all = new ArrayList<>();
        for(int i: nums) all.add(i);
        for(int i = 0; i < nums.length - 3; i++)
            helper(resSet, all.subList((i), all.size()), new ArrayList<Integer>(), target);
        res.addAll(resSet);
        return res;
    }

    public void helper(HashSet<List<Integer>> res, List<Integer> all, List<Integer> curr, int target){
        int space = 4 - curr.size();
        if(space == 0){
            if(target == 0)
                res.add(new ArrayList<>(curr));
            return;
        }
        else if(all.size() < space)
            return;
        else{
            for(int i = 0; i < all.size() - space + 1; i++){
                int now = all.get(i);
                curr.add(now);
                helper(res, all.subList(i + 1, all.size()), curr, target - now);
                curr.remove(curr.size() - 1);
            }
            return;
        }
    }
}