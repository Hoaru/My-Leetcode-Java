class Solution {
    public void helper(int[][] grid, int[] res){
        for(int b = 0; b < grid[0].length; b++){
            int cpos = b;
            for(int r = 0; r < grid.length; r++){
                //边界溢出
                if((cpos == 0 && grid[r][cpos] == -1) || (cpos == grid[0].length - 1 && grid[r][cpos] == 1)){
                    cpos = -1;
                    break;
                }
                //三角截停
                else if((cpos < grid[0].length - 1 && grid[r][cpos] == 1 && grid[r][cpos+1] == -1) || 
                (cpos > 0 && grid[r][cpos] == -1 && grid[r][cpos-1] == 1)){
                    cpos = -1;
                    break;
                }
                //右移
                else if(grid[r][cpos] == 1 && cpos < grid[0].length - 1 && grid[r][cpos+1] == 1){
                    cpos += 1;
                }
                //左移  
                else if(grid[r][cpos] == -1 && cpos > 0 && grid[r][cpos-1] == -1){
                    cpos -= 1;
                }
            }
            res[b] = cpos;
        }
    }
    public int[] findBall(int[][] grid) {
        int[] res = new int[grid[0].length];
        helper(grid, res);
        return res;
    }
}