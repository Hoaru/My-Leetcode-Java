class Solution {
    public List<String> letterCombinations(String digits) {
        int len = digits.length();
        if(len == 0) return new ArrayList<>();
        HashMap<Character, List<Character>> map = new HashMap<>();
        map.put('2', Arrays.asList('a', 'b', 'c'));
        map.put('3', Arrays.asList('d', 'e', 'f'));
        map.put('4', Arrays.asList('g', 'h', 'i'));
        map.put('5', Arrays.asList('j', 'k', 'l'));
        map.put('6', Arrays.asList('m', 'n', 'o'));
        map.put('7', Arrays.asList('p', 'q', 'r', 's'));
        map.put('8', Arrays.asList('t', 'u', 'v'));
        map.put('9', Arrays.asList('w', 'x', 'y', 'z'));
        LinkedList<String> qu = new LinkedList<>();
        qu.offer(digits);
        for(int i = 0; i < len; i++){
            LinkedList<String> newQu = new LinkedList<>();
            while(!qu.isEmpty()){
                String top = qu.poll();
                char now = top.charAt(i);
                for(char c: map.get(now))
                    newQu.offer(top.replaceFirst(Character.toString(now), Character.toString(c)));
            }
            qu = newQu;
        }
        List<String> res = new ArrayList<>();
        for(String i : qu) res.add(i);
        return res;
    }
}