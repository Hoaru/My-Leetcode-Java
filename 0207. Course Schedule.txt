class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites){
        int[] in_degree = new int[numCourses];
        for(int[] i : prerequisites){
            in_degree[i[0]]++;
        }
        Queue<Integer> qu = new LinkedList<>();
        for(int i = 0; i < in_degree.length; i++){
            if(in_degree[i] == 0)
                qu.add(i);
        }
        ArrayList<Integer> res = new ArrayList<>();
        while(!qu.isEmpty()){
            int top = qu.poll();
            res.add(top);
            for(int[] i : prerequisites){
                if(i[1] == top){
                    in_degree[i[0]]--;
                    if(in_degree[i[0]] == 0)
                        qu.add(i[0]);
                }
            }
        }
        return res.size() == numCourses ? true : false;
    }
}