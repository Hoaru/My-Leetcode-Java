/*Given a collection of distinct numbers, return all possible permutations.
For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].
*/

import java.util.*;

public class Main {

    public static List<List<Integer>> helper(List<Integer> nums, List<Integer> cur){
        List<List<Integer>> res = new ArrayList<>();
        if(nums.size() == 0){
            res.add(cur);
            return res;
        }
        else{
            for(int i = 0; i < nums.size(); i++){
                ArrayList<Integer> newCur = new ArrayList<>(cur);
                newCur.add(nums.get(i));
                ArrayList<Integer> newNums = new ArrayList<>(nums);
                newNums.remove(nums.get(i));
                res.addAll(helper(newNums, newCur));
            }
            return res;
        }
    }

    public static List<List<Integer>> permute(int[] nums) {
        List<Integer> newNums = new ArrayList<>();
        for(int i : nums)
            newNums.add(i);
        List<Integer> newCur = new ArrayList<>();
        return helper(newNums, newCur);
    }



    public static void main(String[] args)
    {
        int[] nums = {1,2,3};
        System.out.println(permute(nums));
        System.exit(0);
        //System.out.println();
    }
}
