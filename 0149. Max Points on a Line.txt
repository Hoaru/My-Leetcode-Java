class Solution {
    public static int maxPoints(int[][] points) {
        int len = points.length;
        if(len == 1) return 1;
        int max = 2;
        for(int i = 0; i < len; i++){
            HashMap<Integer, Integer> mapX = new HashMap<>();
            HashMap<Double, Integer> mapXY = new HashMap<>();
            int oldR = points[i][0];
            int oldC = points[i][1];
            for(int j = 0; j < len; j++){
                if(i == j) continue;
                int newR = points[j][0];
                int newC = points[j][1];
                if(newR == oldR){
                    if(mapX.containsKey(newR)){
                        int num = mapX.get(newR) + 1;
                        mapX.put(newR, num);
                        if(num > max) max = num;
                    }
                    else
                        mapX.put(newR, 2);
                }
                else{
                    //Method1: step by step (Runtime Beats 80.13%, Memory Beats 24.55%)
                    double deltaC = newC - oldC;
                    double deltaR = newR - oldR;
                    double k = deltaC/deltaR;
                    //Method2: in a single line (Runtime Beats 17.6%, Memory Beats 5.3%)
                    //double k = (newC - oldC)/(double)(newR - oldR);
                    if(mapXY.containsKey(k)){
                        int num = mapXY.get(k) + 1;
                        mapXY.put(k, num);
                        if(num > max) max = num;
                    }
                    else
                        mapXY.put(k, 2);
                }
            }
        }
        return max;
    }
}